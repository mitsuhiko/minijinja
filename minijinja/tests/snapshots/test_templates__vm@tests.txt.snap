---
source: minijinja/tests/test_templates.rs
expression: "&rendered"
input_file: minijinja/tests/inputs/tests.txt

---
even: true
odd: false
undefined: false
defined: true
undefined2: true
defined2: false
number-int: true
number-float: true
not-seq: false
seq: true
not-map: false
map: true
string: true
not-string: false
starts-with-a: true
ends-with-ha: true

=====

Template {
    name: "tests.txt",
    instructions: [
        00000 | EMIT_RAW (string "even: ")   [tests.txt:1],
        00001 | LOOKUP (var "two")   [tests.txt:1],
        00002 | BUILD_LIST (0 items)   [tests.txt:1],
        00003 | PERFORM_TEST (name "even")   [tests.txt:1],
        00004 | EMIT   [tests.txt:1],
        00005 | EMIT_RAW (string "\nodd: ")   [tests.txt:1],
        00006 | LOOKUP (var "two")   [tests.txt:2],
        00007 | BUILD_LIST (0 items)   [tests.txt:2],
        00008 | PERFORM_TEST (name "odd")   [tests.txt:2],
        00009 | EMIT   [tests.txt:2],
        0000a | EMIT_RAW (string "\nundefined: ")   [tests.txt:2],
        0000b | LOOKUP (var "two")   [tests.txt:3],
        0000c | BUILD_LIST (0 items)   [tests.txt:3],
        0000d | PERFORM_TEST (name "undefined")   [tests.txt:3],
        0000e | EMIT   [tests.txt:3],
        0000f | EMIT_RAW (string "\ndefined: ")   [tests.txt:3],
        00010 | LOOKUP (var "two")   [tests.txt:4],
        00011 | BUILD_LIST (0 items)   [tests.txt:4],
        00012 | PERFORM_TEST (name "defined")   [tests.txt:4],
        00013 | EMIT   [tests.txt:4],
        00014 | EMIT_RAW (string "\nundefined2: ")   [tests.txt:4],
        00015 | LOOKUP (var "ohwell")   [tests.txt:5],
        00016 | BUILD_LIST (0 items)   [tests.txt:5],
        00017 | PERFORM_TEST (name "undefined")   [tests.txt:5],
        00018 | EMIT   [tests.txt:5],
        00019 | EMIT_RAW (string "\ndefined2: ")   [tests.txt:5],
        0001a | LOOKUP (var "ohwell")   [tests.txt:6],
        0001b | BUILD_LIST (0 items)   [tests.txt:6],
        0001c | PERFORM_TEST (name "defined")   [tests.txt:6],
        0001d | EMIT   [tests.txt:6],
        0001e | EMIT_RAW (string "\nnumber-int: ")   [tests.txt:6],
        0001f | LOOKUP (var "two")   [tests.txt:7],
        00020 | BUILD_LIST (0 items)   [tests.txt:7],
        00021 | PERFORM_TEST (name "number")   [tests.txt:7],
        00022 | EMIT   [tests.txt:7],
        00023 | EMIT_RAW (string "\nnumber-float: ")   [tests.txt:7],
        00024 | LOOKUP (var "two_dot_two")   [tests.txt:8],
        00025 | BUILD_LIST (0 items)   [tests.txt:8],
        00026 | PERFORM_TEST (name "number")   [tests.txt:8],
        00027 | EMIT   [tests.txt:8],
        00028 | EMIT_RAW (string "\nnot-seq: ")   [tests.txt:8],
        00029 | LOOKUP (var "two")   [tests.txt:9],
        0002a | BUILD_LIST (0 items)   [tests.txt:9],
        0002b | PERFORM_TEST (name "sequence")   [tests.txt:9],
        0002c | EMIT   [tests.txt:9],
        0002d | EMIT_RAW (string "\nseq: ")   [tests.txt:9],
        0002e | LOOKUP (var "seq")   [tests.txt:10],
        0002f | BUILD_LIST (0 items)   [tests.txt:10],
        00030 | PERFORM_TEST (name "sequence")   [tests.txt:10],
        00031 | EMIT   [tests.txt:10],
        00032 | EMIT_RAW (string "\nnot-map: ")   [tests.txt:10],
        00033 | LOOKUP (var "two")   [tests.txt:11],
        00034 | BUILD_LIST (0 items)   [tests.txt:11],
        00035 | PERFORM_TEST (name "mapping")   [tests.txt:11],
        00036 | EMIT   [tests.txt:11],
        00037 | EMIT_RAW (string "\nmap: ")   [tests.txt:11],
        00038 | LOOKUP (var "map")   [tests.txt:12],
        00039 | BUILD_LIST (0 items)   [tests.txt:12],
        0003a | PERFORM_TEST (name "mapping")   [tests.txt:12],
        0003b | EMIT   [tests.txt:12],
        0003c | EMIT_RAW (string "\nstring: ")   [tests.txt:12],
        0003d | LOOKUP (var "string")   [tests.txt:13],
        0003e | BUILD_LIST (0 items)   [tests.txt:13],
        0003f | PERFORM_TEST (name "string")   [tests.txt:13],
        00040 | EMIT   [tests.txt:13],
        00041 | EMIT_RAW (string "\nnot-string: ")   [tests.txt:13],
        00042 | LOOKUP (var "mapping")   [tests.txt:14],
        00043 | BUILD_LIST (0 items)   [tests.txt:14],
        00044 | PERFORM_TEST (name "string")   [tests.txt:14],
        00045 | EMIT   [tests.txt:14],
        00046 | EMIT_RAW (string "\nstarts-with-a: ")   [tests.txt:14],
        00047 | LOOKUP (var "string")   [tests.txt:15],
        00048 | LOAD_CONST (value "a")   [tests.txt:15],
        00049 | BUILD_LIST (1 items)   [tests.txt:15],
        0004a | PERFORM_TEST (name "startingwith")   [tests.txt:15],
        0004b | EMIT   [tests.txt:15],
        0004c | EMIT_RAW (string "\nends-with-ha: ")   [tests.txt:15],
        0004d | LOOKUP (var "string")   [tests.txt:16],
        0004e | LOAD_CONST (value "ha")   [tests.txt:16],
        0004f | BUILD_LIST (1 items)   [tests.txt:16],
        00050 | PERFORM_TEST (name "endingwith")   [tests.txt:16],
        00051 | EMIT   [tests.txt:16],
        00052 | EMIT_RAW (string "\n")   [tests.txt:16],
    ],
    blocks: {},
    initial_auto_escape: None,
}
