---
source: minijinja/tests/test_templates.rs
expression: "&rendered"
input_file: minijinja/tests/inputs/tests.txt

---
even: true
odd: false
undefined: false
defined: true
undefined2: true
defined2: false
number-int: true
number-float: true
not-seq: false
seq: true
not-map: false
map: true
string: true
not-string: false
starts-with-a: true
ends-with-ha: true

=====

Template {
    name: "tests.txt",
    instructions: [
        00000 | EMIT_RAW (string "even: ")  [line 1],
        00001 | LOOKUP (var "two"),
        00002 | BUILD_LIST (0 items),
        00003 | PERFORM_TEST (name "even"),
        00004 | EMIT,
        00005 | EMIT_RAW (string "\nodd: "),
        00006 | LOOKUP (var "two")  [line 2],
        00007 | BUILD_LIST (0 items),
        00008 | PERFORM_TEST (name "odd"),
        00009 | EMIT,
        0000a | EMIT_RAW (string "\nundefined: "),
        0000b | LOOKUP (var "two")  [line 3],
        0000c | BUILD_LIST (0 items),
        0000d | PERFORM_TEST (name "undefined"),
        0000e | EMIT,
        0000f | EMIT_RAW (string "\ndefined: "),
        00010 | LOOKUP (var "two")  [line 4],
        00011 | BUILD_LIST (0 items),
        00012 | PERFORM_TEST (name "defined"),
        00013 | EMIT,
        00014 | EMIT_RAW (string "\nundefined2: "),
        00015 | LOOKUP (var "ohwell")  [line 5],
        00016 | BUILD_LIST (0 items),
        00017 | PERFORM_TEST (name "undefined"),
        00018 | EMIT,
        00019 | EMIT_RAW (string "\ndefined2: "),
        0001a | LOOKUP (var "ohwell")  [line 6],
        0001b | BUILD_LIST (0 items),
        0001c | PERFORM_TEST (name "defined"),
        0001d | EMIT,
        0001e | EMIT_RAW (string "\nnumber-int: "),
        0001f | LOOKUP (var "two")  [line 7],
        00020 | BUILD_LIST (0 items),
        00021 | PERFORM_TEST (name "number"),
        00022 | EMIT,
        00023 | EMIT_RAW (string "\nnumber-float: "),
        00024 | LOOKUP (var "two_dot_two")  [line 8],
        00025 | BUILD_LIST (0 items),
        00026 | PERFORM_TEST (name "number"),
        00027 | EMIT,
        00028 | EMIT_RAW (string "\nnot-seq: "),
        00029 | LOOKUP (var "two")  [line 9],
        0002a | BUILD_LIST (0 items),
        0002b | PERFORM_TEST (name "sequence"),
        0002c | EMIT,
        0002d | EMIT_RAW (string "\nseq: "),
        0002e | LOOKUP (var "seq")  [line 10],
        0002f | BUILD_LIST (0 items),
        00030 | PERFORM_TEST (name "sequence"),
        00031 | EMIT,
        00032 | EMIT_RAW (string "\nnot-map: "),
        00033 | LOOKUP (var "two")  [line 11],
        00034 | BUILD_LIST (0 items),
        00035 | PERFORM_TEST (name "mapping"),
        00036 | EMIT,
        00037 | EMIT_RAW (string "\nmap: "),
        00038 | LOOKUP (var "map")  [line 12],
        00039 | BUILD_LIST (0 items),
        0003a | PERFORM_TEST (name "mapping"),
        0003b | EMIT,
        0003c | EMIT_RAW (string "\nstring: "),
        0003d | LOOKUP (var "string")  [line 13],
        0003e | BUILD_LIST (0 items),
        0003f | PERFORM_TEST (name "string"),
        00040 | EMIT,
        00041 | EMIT_RAW (string "\nnot-string: "),
        00042 | LOOKUP (var "mapping")  [line 14],
        00043 | BUILD_LIST (0 items),
        00044 | PERFORM_TEST (name "string"),
        00045 | EMIT,
        00046 | EMIT_RAW (string "\nstarts-with-a: "),
        00047 | LOOKUP (var "string")  [line 15],
        00048 | LOAD_CONST (value "a"),
        00049 | BUILD_LIST (1 items),
        0004a | PERFORM_TEST (name "startingwith"),
        0004b | EMIT,
        0004c | EMIT_RAW (string "\nends-with-ha: "),
        0004d | LOOKUP (var "string")  [line 16],
        0004e | LOAD_CONST (value "ha"),
        0004f | BUILD_LIST (1 items),
        00050 | PERFORM_TEST (name "endingwith"),
        00051 | EMIT,
        00052 | EMIT_RAW (string "\n"),
    ],
    blocks: {},
    initial_auto_escape: None,
}
